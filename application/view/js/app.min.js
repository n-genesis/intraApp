$(document).ready(function() {
	$('[data-toggle="tooltip"]').tooltip();
$('[data-toggle="popover"]').popover();
	$("body").on("click", "[data-ma-action]", function(e) {
		function launchIntoFullscreen(element) {
			element.requestFullscreen ? element.requestFullscreen() : element.mozRequestFullScreen ? element.mozRequestFullScreen() : element.webkitRequestFullscreen ? element.webkitRequestFullscreen() : element.msRequestFullscreen && element.msRequestFullscreen();
		};
		e.preventDefault();
		var $this = $(this),
		    action = $(this).data("ma-action");
		switch(action) {
		case "sidebar-open":
        	var target = $this.data("ma-target"),
            backdrop = '<div data-ma-action="sidebar-close" class="ma-backdrop" />';
            $("body").addClass("sidebar-toggled"), $("#header, #header-alt, #main").append(backdrop), $this.addClass("toggled"), $(target).addClass("toggled");
            break;
		case "sidebar-close":
        	$("body").removeClass("sidebar-toggled"), $(".ma-backdrop").remove(), $(".sidebar, .ma-trigger").removeClass("toggled");
            break;
		case"profile-menu-toggle":
			$this.parent().toggleClass("toggled"), $this.next().slideToggle(200);
			break;
		case"submenu-toggle":
			$this.next().slideToggle(200), $this.parent().toggleClass("toggled");
			break;
		case"fullscreen":
			launchIntoFullscreen(document.documentElement);
			break;
		case"clear-localstorage":
			swal({
				title : "Are you sure?",
				text : "All your saved localStorage values will be removed",
				type : "warning",
				showCancelButton : !0,
				confirmButtonText : "Yes, delete it!",
				closeOnConfirm : !1
			}, function() {
				localStorage.clear(), swal("Done!", "localStorage is cleared", "success")
			});
			break;
		case"print":
			window.print();
			break;
		case"login-switch":
			var loginblock = $this.data("ma-block"),
			    loginParent = $this.closest(".lc-block");
			loginParent.removeClass("toggled"), setTimeout(function() {
				$(loginblock).addClass("toggled");
			});
			break;
		case"profile-edit":
			$this.closest(".pmb-block").toggleClass("toggled");
			break;
		case"profile-edit-cancel":
			$(this).closest(".pmb-block").removeClass("toggled");
			break;
		case"action-header-open":
			ahParent = $this.closest(".action-header").find(".ah-search"), ahParent.fadeIn(300), ahParent.find(".ahs-input").focus();
			break;
		case"action-header-close":
			ahParent.fadeOut(300), setTimeout(function() {
				ahParent.find(".ahs-input").val("");
			}, 350);
		}
	});

//Form input effect
$(".auto-size")[0] && autosize($(".auto-size")), $(".fg-line")[0] && ($("body").on("focus", ".fg-line .form-control", function() {
            $(this).closest(".fg-line").addClass("fg-toggled");
        }));
        	
$("body").on("blur", ".form-control", function() {
            var p = $(this).closest(".form-group, .input-group"),
                i = p.find(".form-control").val();
            p.hasClass("fg-float") ? 0 == i.length && $(this).closest(".fg-line").removeClass("fg-toggled") : $(this).closest(".fg-line").removeClass("fg-toggled");
       });
        	
});
//Button Effect
Waves.attach(".btn:not(.btn-icon):not(.btn-float)"), Waves.attach(".btn-icon, .btn-float", ["waves-circle", "waves-float"]), Waves.init();

$(window).load(function() {
	$(".page-loader")[0] && setTimeout(function() {
		$(".page-loader").fadeOut();
	}, 500);
});
$(document).ready(function() {
	$(".c-overflow").mCustomScrollbar({
			theme : "minimal-dark",
			scrollInertia : 100,
			axis : "yx",
			mouseWheel : {
				enable : !0,
				axis : "y",
				preventDefault : true
			}
		});
$(".c-overflow-window").mCustomScrollbar({
			theme : "minimal-dark",
			scrollInertia : 100,
			axis : "yx",
			mouseWheel : {
				enable : !0,
				axis : "y"
			}
		});

}); 

/**
 * Insurance Name fields auto-fill 
 */
var insuranceName = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: 'index.php?route=profile/profile_insurance_policy/getsearchinfo/&for=name&search=%QUERY',
    wildcard: '%QUERY',
  }
});
$('.insurance-name').typeahead(null, {
  name: 'name',
  source: insuranceName
});
/**
 * Insurance Payor ID fields auto-fill 
 */
var insurancePayorId = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: 'index.php?route=profile/profile_insurance_policy/getsearchinfo/&for=payor_id&search=%QUERY',
    wildcard: '%QUERY',
  }
});
$('.insurance-payor-id').typeahead(null, {
  name: 'payor_id',
  source: insurancePayorId
});
/**
 * Insurance Co ID fields auto-fill 
 */
var insuranceInsId = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: 'index.php?route=profile/profile_insurance_policy/getsearchinfo/&for=ins_id&search=%QUERY',
    wildcard: '%QUERY',
  }
});
$('.insurance-ins-id').typeahead(null, {
  name: 'ins_id',
  source: insuranceInsId
});

/**
 * Employer fields auto-fill
 */
var employerName = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: 'index.php?route=profile/profile_employer/getsearchinfo/&for=name&search=%QUERY',
    wildcard: '%QUERY',
  }
});
$('.employer-name').typeahead(null, {
  name: 'name',
  source: employerName
});
/**
 * Group ID fields auto-fill
 */
var groupId = new Bloodhound({
  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
  queryTokenizer: Bloodhound.tokenizers.whitespace,
  remote: {
    url: 'index.php?route=profile/profile_employer/getsearchinfo/&for=group_id&search=%QUERY',
    wildcard: '%QUERY',
  }
});
$('.group-id').typeahead(null, {
  name: 'group_id',
  source: groupId
});
/**
 * check to see if form field has been updated
 */
var form_has_been_modified;
$('[data-sandbox="value-update"]').on("change keyup", function() {
     form_has_been_modified = 1;
});
window.onbeforeunload = function(e) {
	if (form_has_been_modified) {
		var dialogText = 'Unsaved edits have been made on this page. Would you like to continue.';
		  e.returnValue = dialogText;
		  return dialogText;
	}
}; 
